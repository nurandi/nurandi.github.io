---
title: 'Web Scraping dengan R dan rvest: Parsing Tabel HTML'
slug: web-scraping-dengan-r-dan-rvest-parsing-tabel-html
author: "Nur Andi Setiabudi"
date: "Novemver 6, 2019"
layout: post
published: yes
tags:
- r
- scraping
- web scraping
- rvest
- html
type: post
excerpt: Jika data berupa tabel HTML, jika data yang akan di-scrape merupakan tabel dalam suatu halaman web/HTML, package rvest secara ajaib akan mengubah tabel tersebut menjadi data frame. Ikuti tutorialnya pada artikel ini!
---

{% include base_path %}
Artikel ini merupakan lanjutan dari artikel sebelumnya berjudul [Web Scraping dengan R dan rvest]({{ base_path }}/blog/web-scraping-dengan-r-dan-rvest/). Silakan membaca artikel tersebut terlebih dahulu jika baru memulai mempelajari *web scraping* dengan **rvest**.

---

Salah satu favorit saya dalam *package* **rvest** adalah fungsi `html_table`. Sesuai dengan namanya, `html_table` berfungsi untuk *parsing* tabel HTML. Maksudnya, jika data yang akan di-*scrape* merupakan tabel dalam suatu halaman website HTML, fungsi ini secara "ajaib" akan mengubah tabel tersebut menjadi *data frame*. Keren bukan? Mari kita buktikan dengan *scraping* tabel klasemen Liga Inggris dari halaman [BBC Sport](https://www.bbc.com/sport/football/premier-league/table).

{% include base_path %}
{% capture fig_img %}
![BBC EPL Top Scorers]({{ base_path }}/img/blog/2019-11-06-web-scraping-dengan-r-dan-rvest-parsing-tabel-html/bbc-epl-table.png)
{% endcapture %}

<figure>
{{ fig_img | markdownify | remove: "<p>" | remove: "</p>" }}
<span class="caption" markdown="1">Klasemen Liga Inggris. Diakses dari [BBC Sport](https://www.bbc.com/sport/football/premier-league/table) pada 5 November 2019. Semoga sampai akhir musim urutannya tidak berubah. YNWA!</span>
</figure>

Kita mulai dengan *load* **rvest** dan baca HTML.

```{r}
library(rvest)

url <- "https://www.bbc.com/sport/football/premier-league/table"
html <- url %>% read_html
```

Melalui **Inspect elements** (dijelaskan pada artikel [sebelumnya]({{ base_path }}/blog/web-scraping-dengan-r-dan-rvest/)), kita mengetahui bahwa *CSS selector* yang memuat tabel klasemen adalah `.gs-o-table`. 

```
<table class="gs-o-table " data-reactid=".98jiqbvx9q.2.0.0.0.0.1.$competition-table-0">
```

Dengan hanya menggunakan fungsi `html_node` dan `html_table`, kita peroleh sebuah `data frame` tanpa perlu repot melakukan *parsing*.

```{r}
epl_table <- html %>%
    html_node(".gs-o-table") %>%
    html_table

str(epl_table)
```

*Scraping* dan *parsing* tabel HTML 100% selesai. Tinggal sedikit *final-touches* untuk "membersihkan" data. **Pertama**, hapus kolom dan baris yang tidak perlu. Jika diperhatikan (silakan *print* `data frame`), dua kolom pertama serta satu baris terakhir tidak diperlukan dan dapat dihapus.

Hapus dua kolom pertama:

```{r}
epl_table[1:2] <- list(NULL)
```

Hapus satu baris terakhir (baris ke-21):

```{r}
epl_table <- epl_table[-21,]
```

```{r}
str(epl_table)
```

**Kedua**, *reformat* kolom **Form**. Kita lihat, pada kolom **Form**, selain singkatan dan status juga ditulis pertandingan, skor dan tanggalnya. Seperti:

```{r}
epl_table$Form[1]
```

akan kita ubah menjadi **W,W,D,W,W**.

Untuk keperluan ini, kita akan menggunakan beberapa fungsi dari *package* [**stringr**](https://stringr.tidyverse.org/reference/index.html) yang juga dikembangkan oleh tim RStudio. Silakan instal dan *load package* **stringr**:

```{r eval=FALSE}
install.packages("stringr")
library(stringr)
```

Pertama-tama, kita ekstrak teks **WWon**, **DDrew**, atau **LLost**. Gunakan fungsi `str_extract_all`, dengan *regular expression* `"WWon|DDrew|LLost"`. Simbol `|` berarti "atau".

```{r}
extract_form <- function(form){
    str_extract_all(form, "WWon|DDrew|LLost")
}

form <- sapply(epl_table$Form, extract_form, USE.NAMES = FALSE)
```

```{r}
str(form)
```

Selanjutnya dalam setiap elemen *list*, ekstrak satu huruf **W**, **D**, atau **L** lalu gabungkan dengan *delimiter* tanda koma. Ekstraksi huruf menggunakan fungsi `str_extract`.

```{r}
simply_form <- function(form){
    form %>%
        str_extract("W|D|L") %>%
        paste(collapse = ",")
}

form <- sapply(form, simply_form)
```

```{r}
str(form)
```

Terakhir, *update* kolom **Form** pada *data frame* **epl_table** dengan *vector* **form**.

```{r}
epl_table$Form <- form
```

Dan... ini hasil akhirnya

```{r}
print(epl_table)
```

Ajaib bukan? Selamat mencoba!





